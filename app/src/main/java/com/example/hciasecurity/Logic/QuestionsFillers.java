package com.example.hciasecurity.Logic;
import android.os.Build;

import androidx.annotation.RequiresApi;

import com.example.hciasecurity.Logic.MyQuestions;
import com.example.hciasecurity.Logic.Questions.MultipleChoice;
import com.example.hciasecurity.Logic.Questions.Question;
import com.example.hciasecurity.Logic.Questions.SingleChoice;
import com.example.hciasecurity.Logic.Questions.TrueAndFalse;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
public class QuestionsFillers {
    private static ArrayList<TrueAndFalse> trueAndFalses;
    private static ArrayList<MultipleChoice> multipleChoices;
    private static  ArrayList<SingleChoice> singleChoices;
    public static String [] chapterNames={"General",
            "BasicConceptofInformationSecurity",
            "InformationSecurityStandardsandSpecifications",
            "BasicNetworkConcepts",
            "CommonNetworkDevices",
            "CommonInformationSecurityThreats",
            "ThreatDefenseandInformationSecurityDevelopmentTrends",
            "OperatingSystemOverview",
            "CommonServerTypesandThreats",
            "HostFirewallsandAntivirusSoftware",
            "IntroductiontoFirewalls",
            "NetworkAddressTranslation",
            "DualSystemHotStandby",
            "FireWallUserManagement",
            "OverviewofIntrusionPrevention",
            "EncryptionandDecryptionMechanism",
            "PKICertificateSystem",
            "ApplicationofCryptographicTechnologies",
            "IntroductiontoSecurityOperations",
            "DataMonitoringandAnalysis",
            "DigitalForensics",
            "CybersecurityEmergencyResponse"
    };
    enum ChapterName{
        BasicConceptofInformationSecurity(1),
        InformationSecurityStandardsandSpecifications(2),
        BasicNetworkConcepts(3),
        CommonNetworkDevices(4),
        CommonInformationSecurityThreats(5),
        ThreatDefenseandInformationSecurityDevelopmentTrends(6),
        OperatingSystemOverview(7),
        CommonServerTypesandThreats(8),
        HostFirewallsandAntivirusSoftware(9),
        IntroductiontoFirewalls(10),
        NetworkAddressTranslation(11),
        DualSystemHotStandby(12),
        FireWallUserManagement(13),
        OverviewofIntrusionPrevention(14),
        EncryptionandDecryptionMechanism(15),
        PKICertificateSystem(16),
        ApplicationofCryptographicTechnologies(17),
        IntroductiontoSecurityOperations(18),
        DataMonitoringandAnalysis(19),
        DigitalForensics(20),
        CybersecurityEmergencyResponse(21);
        private int number;
        ChapterName(int number){
            this.number=number;
        }
        public int getNumber(){
            return number;
        }
    }

    public static void initialize(){
        trueAndFalseFillers();
        singleChoicesFillers();
        multipleChoiceFillers();
    }
    private static void trueAndFalseFillers(){
        trueAndFalses=new ArrayList<TrueAndFalse>();
        trueAndFalses.add(new TrueAndFalse(
                "IPSec VPN uses an asymmetric encryption algorithm to encrypt the transmitted data",
                false,
                ChapterName.ApplicationofCryptographicTechnologies.number
        ));
        trueAndFalses.add(new TrueAndFalse(
                "The network administrator can collect data to be analyzed on the network device by means of packet capture, port mirroring, or log, etc",
                true,
                ChapterName.DataMonitoringandAnalysis.number
        ));
        trueAndFalses.add(new TrueAndFalse(
                "The world's first worm \"Morris worm\" made people realize that as people become more dependent on computers, the possibility of computer networks being attacked increases, and it is necessary to establish a comprehensive emergency response system.",
                true,
                ChapterName.CommonInformationSecurityThreats.number
        ));
    }

    private static void singleChoicesFillers(){
        singleChoices=new ArrayList<SingleChoice>();
        singleChoices.add(new SingleChoice(
                "Which of the following descriptions is wrong about the root CA certificate?",
                "Signature is generated by CA public key encryption.",
                new LinkedList<String>(){
                    {
                        add("The issuer is CA.");
                        add("The certificate subject name is CA.");
                        add("Public key information is the public key ofthe CA.");
                    }
                },
                ChapterName.PKICertificateSystem.number
        ));
        singleChoices.add(new SingleChoice(
                "Which configuration is correct to implement NAT ALG function?",
                "detect protocol.",
                new LinkedList<String>(){
                    {
                        add("nat alg protocol.");
                        add("alg protocol.");
                        add("nat protocol.");
                    }
                },
                ChapterName.NetworkAddressTranslation.number
        ));
        singleChoices.add(new SingleChoice(
                "Which of the following statements is wrong about the firewall gateway's anti-virus response to the HTTP protocol?",
                "Response methods include announcement and blocking.",
                new LinkedList<String>(){
                    {
                        add("When the gateway device blocks the HTTP connection, push the web page to the client and generate a log.");
                        add("Alarm mode device only generates logs and sends them out without processing the files transmitted by the HTTP protocol.");
                        add("Blocking means that the device disconnects from the HTTP server and blocks file transfer.");
                    }
                },
                0
        ));

    }

    private static void multipleChoiceFillers(){
        multipleChoices=new ArrayList<MultipleChoice>();
        multipleChoices.add(new MultipleChoice(
                "Which of the following information will be encrypted during the use of digital envelopes?",
                new LinkedList<String>(){
                    {
                        add("Symmetric key");
                        add("User data");

                    }
                },
                new LinkedList<String>(){
                    {
                        add("Receiver public key");
                        add("Receiver private key");
                    }
                },
                ChapterName.EncryptionandDecryptionMechanism.number
        ));
        multipleChoices.add(new MultipleChoice(
                "Which of the following is an action to be taken during the eradication phase of the cyber security emergency response?",
                new LinkedList<String>(){
                    {
                        add("Find sick Trojans, illegal authorization, system vulnerabilities, and deal with it in time");
                        add("Revise the security policy based on the security incident that occurred, enable security auditing");

                    }
                },
                new LinkedList<String>(){
                    {
                        add("Block the behavior ofthe attack, reduce the scope of influence");
                        add("Confirm the damage caused by security incidents and report security incidents");
                    }
                },
                0
        ));
        multipleChoices.add(new MultipleChoice(
                "Which of the following attacks can DHCP Snooping prevent?",
                new LinkedList<String>(){
                    {
                        add("DHCP Server counterfeiter attack");
                        add("Intermediaries and IP/MAC spoofing attacks");
                        add("IP spoofing attack");
                        add("Counterfeit DHCP lease renewal packet attack using option82 field");
                    }
                },
                new LinkedList<String>(),
                0
        ));
    }


    public MyQuestions getExamQuestions(){
        MyQuestions questions=new MyQuestions();
        Collections.shuffle(trueAndFalses);
        questions.setTrueAndFalses(((ArrayList<TrueAndFalse>) trueAndFalses.clone()).subList(0,3));
        Collections.shuffle(singleChoices);
        questions.setSingleChoices(((ArrayList<SingleChoice>) singleChoices.clone()).subList(0,3));
        Collections.shuffle(multipleChoices);
        questions.setMultipleChoices(((ArrayList<MultipleChoice>) multipleChoices.clone()).subList(0,3));
        return questions;
    }

    public MyQuestions getLittleExamQuestions(){
        MyQuestions questions=new MyQuestions();
        Collections.shuffle(trueAndFalses);
        questions.setTrueAndFalses(((ArrayList<TrueAndFalse>) trueAndFalses.clone()).subList(0,3));
        Collections.shuffle(singleChoices);
        questions.setSingleChoices(((ArrayList<SingleChoice>) singleChoices.clone()).subList(0,3));
        Collections.shuffle(multipleChoices);
        questions.setMultipleChoices(((ArrayList<MultipleChoice>) multipleChoices.clone()).subList(0,3));
        return questions;
    }
    public static MyQuestions getAllQueations(){
        MyQuestions questions=new MyQuestions();
        questions.setTrueAndFalses(trueAndFalses);
        questions.setMultipleChoices(multipleChoices);
        questions.setSingleChoices(singleChoices);
        Collections.sort(questions);
        return questions;
    }
    public MyQuestions getQuizTrueandFalseQuestions(){
        MyQuestions questions=new MyQuestions();
        Collections.shuffle(trueAndFalses);
        questions.setTrueAndFalses(((ArrayList<TrueAndFalse>) trueAndFalses.clone()).subList(0,10));
        return questions;
    }
    public MyQuestions getQuizSingleChoiceQuestions(){
        MyQuestions questions=new MyQuestions();
        Collections.shuffle(singleChoices);
        questions.setSingleChoices(((ArrayList<SingleChoice>) singleChoices.clone()).subList(0,10));
        return questions;
    }
    public MyQuestions getQuizMultipleChoiceQuestions(){
        MyQuestions questions=new MyQuestions();
        Collections.shuffle(multipleChoices);
        questions.setMultipleChoices(((ArrayList<MultipleChoice>) multipleChoices.clone()).subList(0,10));
        return questions;
    }
}